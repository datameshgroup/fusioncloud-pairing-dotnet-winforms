// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using DataMeshGroup.Fusion.Model;
using ProfanityFilter;
using QRCoder;

namespace DataMeshGroup.Fusion.Pairing.WinForms
{
    public partial class PairingDialog : Form
    {
        public string SaleID { get; set; }
        public string POIID { get; set; }
        public string KEK { get; set; }

        string posName;
        PairingData pairingData;
        FusionClient fusionClient;

        public enum DialogType { Normal, Success, Error };
        bool pairingSuccessful;
        bool manualEntry;

        int nextTimerCount;


        public PairingDialog(FusionClient fusionClient, string posName)
        {
            InitializeComponent();

            if (fusionClient is null)
            {
                throw new ArgumentNullException(nameof(fusionClient));
            }
            if (fusionClient.LoginRequest?.SaleSoftware?.CertificationCode is null)
            {
                throw new ArgumentNullException("CertificationCode");
            }
            this.pairingSuccessful = false;
            this.manualEntry = false;
            this.fusionClient = fusionClient;
            this.posName = (new ProfanityFilter.ProfanityFilter()).CensorString(posName);

            PnlManualEntry.Visible = false;
            PnlQRCode.Visible = true;
            PnlPairingStatus.Visible = false;
        }

        private void PairingDialog_Load(object sender, EventArgs e)
        {
            UpdateQRCode();
            ResetNextTimer();
        }


        private static void SetLabel(Label label, Color background, Color foreground, string content)
        {
            label.Text = content;
            label.BackColor = background;
            label.ForeColor = foreground;
            label.Visible = !string.IsNullOrEmpty(content);
        }

        public void ShowPairingLogonStatus(string title, string displayLine1, string displayText, DialogType dialogType, bool enableOk, bool enableNext)
        {
            Color resultForeground, resultBackground;
            switch (dialogType)
            {
                case DialogType.Error:
                    resultBackground = Theme.COLOR_RESULT_BACKGROUND_ERROR;
                    resultForeground = Theme.COLOR_RESULT_FOREGROUND_ERROR;
                    break;
                case DialogType.Success:
                    resultBackground = Theme.COLOR_RESULT_BACKGROUND_SUCCESS;
                    resultForeground = Theme.COLOR_RESULT_FOREGROUND_SUCCESS;
                    break;
                case DialogType.Normal:
                default:
                    resultBackground = Theme.COLOR_RESULT_BACKGROUND_PENDING;
                    resultForeground = Theme.COLOR_RESULT_FOREGROUND_PENDING;
                    break;
            }
            // Set title label
            SetLabel(LblPaymentDialogTitle, resultBackground, resultForeground, title);
            // Set optional text
            SetLabel(LblPaymentDialogLine1, Color.Transparent, dialogType == DialogType.Error ? resultBackground : resultForeground, displayLine1);
            SetLabel(TxtPaymentDialogText, Color.Transparent, Theme.COLOR_RESULT_FOREGROUND_PENDING, displayText);

            BusyIndicator.Visible = !enableOk;

            BtnDialogOK.Visible = enableOk;
            BtnDialogCancel.Visible = !enableOk;

            BtnNext.Visible = enableNext;


            if (enableOk)
            {
                BtnDialogOK.Focus();
            }
            if (enableNext)
            {
                BtnNext.Focus();
            }


            if (this.Visible)
            {
                this.Show();
            }

            // Ensure the dialog is centered on the desktop
            if (Screen.PrimaryScreen?.WorkingArea != null)
            {
                Rectangle r = Screen.PrimaryScreen.WorkingArea;
                this.Location = new Point((r.Width - this.Width) / 2, (r.Height - this.Height) / 2);
            }

            PnlManualEntry.Visible = false;
            PnlQRCode.Visible = false;
            PnlPairingStatus.Visible = true;
        }


        private async void BtnNext_Click(object sender, EventArgs e)
        {
            await DoPairingLogon();
        }

        private void BtnEnterCredentialsManually_Click(object sender, EventArgs e)
        {
        }

        private void BtnDialogOk_Click(object sender, EventArgs e)
        {
            DialogResult = pairingSuccessful ? DialogResult.OK : DialogResult.Cancel;
        }


        private void UpdateQRCode()
        {
            pairingData = fusionClient.GetPairingData(posName);
            string pairingDataString = Newtonsoft.Json.JsonConvert.SerializeObject(pairingData);

            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(pairingDataString, QRCodeGenerator.ECCLevel.M);
            QRCode qrCode = new QRCode(qrCodeData);
            qrPictureBox.Image = qrCode.GetGraphic(pixelsPerModule: 16);
        }

        private void ResetNextTimer()
        {
            BtnNext.Enabled = false;
            BtnNext.ForeColor = System.Drawing.ColorTranslator.FromHtml("#C0C0C0");
            BtnNext.BackColor = Theme.COLOR_RESULT_BACKGROUND_PENDING;


            NextTimer.Enabled = false;
            nextTimerCount = 80;
            NextTimer.Interval = 100;
            NextTimer.Enabled = true;

            progressBar1.Visible = true;
            progressBar1.Maximum = 80;
            progressBar1.Value = nextTimerCount;

            progressBar1.ProgressBarColor = Theme.COLOR_RESULT_BACKGROUND_SUCCESS;
            progressBar1.ForeColor = Theme.COLOR_RESULT_BACKGROUND_SUCCESS;
            progressBar1.BackColor = Theme.COLOR_RESULT_BACKGROUND_PENDING;
        }

        private void NextTimer_Tick(object sender, EventArgs e)
        {
            if (nextTimerCount == 0)
            {
                // end timer
                NextTimer.Enabled = false;
                progressBar1.Visible = false;
                BtnNext.Enabled = true;
                BtnNext.ForeColor = Theme.COLOR_RESULT_FOREGROUND_SUCCESS;
                BtnNext.BackColor = Theme.COLOR_RESULT_BACKGROUND_SUCCESS;
            }
            else
            {
                nextTimerCount--;
                progressBar1.Value = nextTimerCount;
            }
        }


        private async Task DoPairingLogon()
        {


            // Record existing details
            string previousSaleID = fusionClient.SaleID;
            string previousPOIID = fusionClient.POIID;
            string previousKEK = fusionClient.KEK;

            try
            {
                ShowPairingLogonStatus("PAIRING WITH TERMINAL", "", "", DialogType.Normal, false, false);

                // Attempt a login with the new credentials
                if (manualEntry)
                {
                    fusionClient.SaleID = txtSaleID.Text;
                    fusionClient.POIID = txtPOIId.Text;
                    fusionClient.KEK = txtKEK.Text;
                    fusionClient.LoginRequest.Pairing = null;
                }
                else
                {
                    fusionClient.SaleID = pairingData.SaleID;
                    fusionClient.POIID = pairingData.PairingPOIID;
                    fusionClient.KEK = pairingData.KEK;
                    fusionClient.LoginRequest.Pairing = true;
                }


                // Attempt pairing login 
                var result = await fusionClient.SendRecvAsync<LoginResponse>(fusionClient.LoginRequest, new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token);
                if (!result.Response.Success)
                {
                    // Roll back to old credentials
                    fusionClient.SaleID = previousSaleID;
                    fusionClient.POIID = previousPOIID;
                    fusionClient.KEK = previousKEK;
                    ShowPairingLogonStatus("PAIRING UNSUCCESSFUL", ErrorConditionToDisplayText(result.Response?.ErrorCondition), result.Response?.AdditionalResponse, DialogType.Error, true, false);
                    return;
                }

                // Make credentials available for the caller
                fusionClient.LoginRequest.Pairing = null;
                fusionClient.POIID = fusionClient.LastSaleToPOIResponse.MessageHeader.POIID;
                SaleID = fusionClient.SaleID;
                POIID = fusionClient.POIID;
                KEK = fusionClient.KEK;

                // Attempt a login using the returned credentials
                if (!manualEntry)
                {
                    result = await fusionClient.SendRecvAsync<LoginResponse>(fusionClient.LoginRequest, new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token);
                    if (!result.Response.Success)
                    {
                        // Roll back to old credentials
                        fusionClient.SaleID = previousSaleID;
                        fusionClient.POIID = previousPOIID;
                        fusionClient.KEK = previousKEK;
                        ShowPairingLogonStatus("PAIRING UNSUCCESSFUL", ErrorConditionToDisplayText(result.Response?.ErrorCondition), result.Response?.AdditionalResponse, DialogType.Error, true, false);
                        return;
                    }
                }

                ShowPairingLogonStatus("PAIRING SUCCESSFUL", "", "", DialogType.Success, true, false);
                pairingSuccessful = true;
            }
            catch (Exception ex)
            {
                // Roll back to old credentials
                fusionClient.SaleID = previousSaleID;
                fusionClient.POIID = previousPOIID;
                fusionClient.KEK = previousKEK;
                ShowPairingLogonStatus("PAIRING UNSUCCESSFUL", "", ex.Message, DialogType.Error, true, false);
            }
        }

        private void BtnBack_Click(object sender, EventArgs e)
        {
            PnlManualEntry.Visible = false;
            PnlQRCode.Visible = true;
            PnlPairingStatus.Visible = false;
            manualEntry = false;
        }


        public static string ErrorConditionToDisplayText(ErrorCondition? errorCondition)
        {
            switch (errorCondition)
            {
                case ErrorCondition.Aborted:
                    return "ABORTED";
                case ErrorCondition.Busy:
                    return "BUSY";
                case ErrorCondition.Cancel:
                    return "CANCEL";
                case ErrorCondition.DeviceOut:
                    return "DEVICE OUT";
                case ErrorCondition.InProgress:
                    return "IN PROGRESS";
                case ErrorCondition.InsertedCard:
                    return "INSERTED CARD";
                case ErrorCondition.InvalidCard:
                    return "INVALID CARD";
                case ErrorCondition.LoggedOut:
                    return "LOGGED OUT";
                case ErrorCondition.MessageFormat:
                    return "MESSAGE FORMAT";
                case ErrorCondition.NotAllowed:
                    return "NOT ALLOWED";
                case ErrorCondition.NotFound:
                    return "NOT FOUND";
                case ErrorCondition.PaymentRestriction:
                    return "PAYMENT RESTRICTION";
                case ErrorCondition.Refusal:
                    return "REFUSAL";
                case ErrorCondition.UnavailableDevice:
                    return "UNAVAILABLE DEVICE";
                case ErrorCondition.UnavailableService:
                    return "UNAVAILABLE SERVICE";
                case ErrorCondition.Unknown:
                    return "UNKNOWN";
                case ErrorCondition.UnreachableHost:
                    return "UNREACHABLE HOST";
                case ErrorCondition.WrongPIN:
                    return "WRONG PIN";
                case null:
                    return "UNKNOWN";
                default:
                    return errorCondition.Value.ToString();
            }

        }

        private void lblVersion_Click(object sender, EventArgs e)
        {

        }

        private void BtnDialogCancel_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Cancel;
        }

        private void BtnNext_Paint(object sender, PaintEventArgs e)
        {
            Button btn = (Button)sender;
            SolidBrush solidBrush = new SolidBrush(btn.ForeColor);

            StringFormat stringFormat = new StringFormat
            {
                Alignment = StringAlignment.Center,
                LineAlignment = StringAlignment.Center
            };

            e.Graphics.DrawString("NEXT", btn.Font, solidBrush, new Rectangle(0, 0, btn.Width, btn.Height), stringFormat);

            solidBrush.Dispose();
            stringFormat.Dispose();
        }

        private void BtnEnterCredentialsManually_Click_1(object sender, EventArgs e)
        {
            PnlManualEntry.Visible = true;
            PnlQRCode.Visible = false;
            PnlPairingStatus.Visible = false;
            manualEntry = true;
        }
    }


    public class Theme
    {
        public static readonly Color COLOR_RESULT_BACKGROUND_ERROR = System.Drawing.ColorTranslator.FromHtml("#EC2027");
        public static readonly Color COLOR_RESULT_FOREGROUND_ERROR = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");

        public static readonly Color COLOR_RESULT_BACKGROUND_SUCCESS = System.Drawing.ColorTranslator.FromHtml("#6E9E5E");
        public static readonly Color COLOR_RESULT_FOREGROUND_SUCCESS = System.Drawing.ColorTranslator.FromHtml("#FFFFFF");

        public static readonly Color COLOR_RESULT_BACKGROUND_PENDING = System.Drawing.ColorTranslator.FromHtml("#E8E8E8");
        public static readonly Color COLOR_RESULT_FOREGROUND_PENDING = System.Drawing.ColorTranslator.FromHtml("#808080");
    }

}
